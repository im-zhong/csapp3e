#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	# step = 8
	xorq %rax, %rax		# count = 0;

	# special case
	# if array length is 1, jump to Final1 directly
	iaddq $-1, %rdx
	je Final1

	# because we sub 1 from %rdx, so we sub 7 at here
	iaddq $-7, %rdx		# len <= step?
	jl Final			# if so, goto Done:

Loop:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10	
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12	
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14	
	mrmovq 56(%rdi), %rcx

	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)	
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)	
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)	
	rmmovq %rcx, 56(%rsi)

	# accumulate positive count
	andq %r8, %r8
	jl L1
	iaddq $1, %rax
L1:
	andq %r9, %r9
	jl L2
	iaddq $1, %rax
L2:
	andq %r10, %r10
	jl L3
	iaddq $1, %rax
L3:
	andq %r11, %r11
	jl L4
	iaddq $1, %rax
L4:
	andq %r12, %r12
	jl L5
	iaddq $1, %rax
L5:
	andq %r13, %r13
	jl L6
	iaddq $1, %rax
L6:
	andq %r14, %r14
	jl L7
	iaddq $1, %rax
L7:
	andq %rcx, %rcx
	jl L8
	iaddq $1, %rax
L8:
	iaddq $64, %rdi
	iaddq $64, %rsi
	iaddq $-8, %rdx
	jge Loop			# if final array elements > step, loop

Final:					# otherwise, enter final stage
	# if final element size >= 4
	iaddq $4, %rdx		
	jge Final4

	# otherwise, jump to relative branch
	iaddq $1, %rdx
	je Final3
	iaddq $1, %rdx
	je Final2
	iaddq $1, %rdx
	je Final1
	ret

# final element size == 1
Final1:
	mrmovq (%rdi), %r8
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle Done
	iaddq $1, %rax
	ret

# final element size == 2
Final2:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	andq %r8, %r8
	jl Final2L1
	iaddq $1, %rax
Final2L1:
	andq %r9, %r9
	jl Final2L2
	iaddq $1, %rax
Final2L2:
	ret

# final element size == 3
Final3:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	andq %r8, %r8
	jl Final3L1
	iaddq $1, %rax
Final3L1:
	andq %r9, %r9
	jl Final3L2
	iaddq $1, %rax
Final3L2:
	andq %r10, %r10
	jl Final3L3
	iaddq $1, %rax
Final3L3:
	ret

# final element size >= 4
Final4:
	# load 4 elements
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	# store 4 elements
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	# accumulate positive number counts
	andq %r8, %r8
	jl Final4L1
	iaddq $1, %rax
Final4L1:
	andq %r9, %r9
	jl Final4L2
	iaddq $1, %rax
Final4L2:
	andq %r10, %r10
	jl Final4L3
	iaddq $1, %rax
Final4L3:
	andq %r11, %r11
	jl Final4L4
	iaddq $1, %rax
Final4L4:
	iaddq $32, %rdi
	iaddq $32, %rsi
	# because element size >= 4, <= 7
	# so we have four possiblities, which are final1, final2, final3 and none
	andq %rdx, %rdx
	je Done
	iaddq $-1, %rdx
	je Final1
	iaddq $-1, %rdx
	je Final2
	iaddq $-1, %rdx
	je Final3

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
