#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# 53.2
	# Loop header, step = 8
	xorq %rax, %rax		# count = 0;
	iaddq $-1, %rdx
	je remain1
	iaddq $-7, %rdx		# len <= 0?
	jge Loop			# if so, goto Done:

Remain:
	iaddq $4, %rdx
Table:
	jge LastEight

	iaddq $1, %rdx
	je remain3
	iaddq $1, %rdx
	je remain2
	iaddq $1, %rdx
	je remain1
	ret
	
	# 否则我们在这里进行一个一定的四路
LastEight:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)

	andq %r8, %r8
	jl LastEightL1
	iaddq $1, %rax
LastEightL1:
	andq %r9, %r9
	jl LastEightL2
	iaddq $1, %rax
LastEightL2:
	andq %r10, %r10
	jl LastEightL3
	iaddq $1, %rax
LastEightL3:
	andq %r11, %r11
	jl LastEightL4
	iaddq $1, %rax
LastEightL4:

	iaddq $32, %rdi
	iaddq $32, %rsi

	andq %rdx, %rdx
	je Done
	iaddq $-1, %rdx
	je remain1
	iaddq $-1, %rdx
	je remain2
	iaddq $-1, %rdx
	je remain3

remain1:
	mrmovq (%rdi), %r8
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle Done
	iaddq $1, %rax
	ret

remain2:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9

	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)

	andq %r8, %r8
	jl remain2L1
	iaddq $1, %rax
remain2L1:
	andq %r9, %r9
	jl remain2L2
	iaddq $1, %rax
remain2L2:
	ret

remain3:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10	# read val from src...

	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)	# ...and store it to dst

	andq %r8, %r8
	jl remain3L1
	iaddq $1, %rax
remain3L1:
	andq %r9, %r9
	jl remain3L2
	iaddq $1, %rax
remain3L2:
	andq %r10, %r10
	jl remain3L3
	iaddq $1, %rax
remain3L3:
	ret	

Loop:	
	# lode/use hazard
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12	# read val from src...
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14	# read val from src...
	mrmovq 56(%rdi), %rcx

	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)	# ...and store it to dst
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)	# ...and store it to dst
	rmmovq %rcx, 56(%rsi)

	andq %r8, %r8
	jl L1
	iaddq $1, %rax
L1:
	andq %r9, %r9
	jl L2
	iaddq $1, %rax
L2:
	andq %r10, %r10
	jl L3
	iaddq $1, %rax
L3:
	andq %r11, %r11
	jl L4
	iaddq $1, %rax
L4:
	andq %r12, %r12
	jl L5
	iaddq $1, %rax
L5:
	andq %r13, %r13
	jl L6
	iaddq $1, %rax
L6:
	andq %r14, %r14
	jl L7
	iaddq $1, %rax
L7:
	andq %rcx, %rcx
	jl L8
	iaddq $1, %rax
L8:
	
Npos:	
	iaddq $64, %rdi
	iaddq $64, %rsi
	iaddq $-8, %rdx
	jge Loop				# if so, goto Loop:
	jmp Remain

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
