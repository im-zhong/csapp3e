# 2022/10/31
# zhangzhong
# sum.ys: Iteratively sum linked list elements

# Execution begins at address 0
.pos 0
    irmovq stack, %rsp  # Set up stack pinter
    call main           # Execute main function
    halt                # Terminate Program

# sample linked list
.align 8
ele1:
        .quad 0x00a
        .quad ele2
ele2:
        .quad 0x0b0
        .quad ele3
ele3:
        .quad 0xc00
        .quad 0

main:
    irmovq ele1, %rdi   # prepare first parameter for sum
    call sum            # call sum
    ret

# sum the elemets of a linked list
# long sum_list(list_ptr ls)
sum:
    xorq %rax, %rax         # set %rax to 0
    jmp L2
L3:
    mrmovq (%rdi), %r8
    addq %r8, %rax       # add list->val to %rax
    mrmovq 8(%rdi), %rdi    # list = list->next
L2:
    andq %rdi, %rdi         # test if list pointer is 0
    jne L3                 # if list pointer is not 0, jump to L3
    ret

# Stack starts here and grows to lower addresses
.pos 0x200
stack:
