# 2022/10/31
# zhangzhong
# rsum.ys: Recursively sum linked list elements

# Execution begins at address 0
.pos 0
    irmovq stack, %rsp  # Set up stack pinter
    call main           # Execute main function
    halt                # Terminate Program

# sample linked list
.align 8
ele1:
        .quad 0x00a
        .quad ele2
ele2:
        .quad 0x0b0
        .quad ele3
ele3:
        .quad 0xc00
        .quad 0

main:
    irmovq ele1, %rdi
    call rsum
    ret

# sum the elemets of a linked list recursively
# long rsum_list(list_ptr ls)
# ls in %rdi
rsum:
    andq %rdi, %rdi     # test if list pointer is nullptr
    je L1           
    pushq %rbx
    mrmovq (%rdi), %rbx
    mrmovq 8(%rdi), %rdi
    call rsum
    addq %rbx, %rax
    popq %rbx
    ret
L1:
    xorq %rax, %rax     # if list pointer is nullptr, return 0
    ret

# Stack starts here and grows to lower addresses
.pos 0x200
stack:
